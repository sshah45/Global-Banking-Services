import random
import re
import csv
import string


def login(
    accnum, password
) -> tuple[
    str
]:  # Authenticate login, checks if the account exists and the password is correct
    found = False
    row = 0  # To know at which row (of the csv file) the acc_num matches.
    try:
        with open("input_data1.csv") as file:
            reader = csv.DictReader(file)
            data = list(reader)  # List of dictionaries.

            # Search for matching account number
            for dictionary in data:
                row += 1
                if accnum == dictionary["acc_num"]:
                    found = True
                    matched_dict = data[row - 1]
                    break
                else:
                    continue

            if found == False:
                raise ValueError

            if password == matched_dict["password"]:
                print("\nLogged in Succesfully!\n")
                return (
                    matched_dict["name"],
                    matched_dict["acc_num"],
                    matched_dict["pin"],
                )

            else:
                raise ValueError

    except FileNotFoundError:
        raise Exception("File not found")


def validate_name() -> str:  # validates name format (First, Middle, Last)
    while True:
        name = input("\nName (First,Middle,Last): ")

        if re.search(r"^[A-Z]+ [A-Z]+ [A-Z]+$", name, re.IGNORECASE):
            name = name.upper()
            return name

        else:
            print("Incorrect Format❗")
            continue


def get_valid_input(prompt: str, regex: str, error_msg: str) -> str:
    while True:
        user_input = input(prompt)
        if re.search(regex, user_input):
            return user_input
        else:
            print(error_msg)


def validate_contact() -> str:  # validates contact number (10 digits)
    return get_valid_input("Contact (10 digits): ", r"^[0-9]{10}$", "Invalid Contact❗")


def validate_password() -> (
    str
):  # Validates user generated password and does not accept it if not formated correctly.
    print(
        "\nSet Your Password --> Include Atleast ☑ 4 Characters(atleast ☑ 1 Upper Cased), ☑ 2 Numerics and ☑ 1 Special Character (length: 8 - 14)"
    )
    while True:
        p = input("Password: ").strip()
        password = list(p)
        upp = 0
        alpha = 0
        num = 0
        spe = 0
        pun = list(string.punctuation)  # List of Punctuation Marks

        if re.search(r"^[a-zA-Z0-9\W]{8,14}$", p) and re.search(r"[\s'']", p) == None:
            for ele in password:
                if ele.isupper():
                    upp += 1
                elif ele.isalpha():
                    alpha += 1
                elif ele.isnumeric():
                    num += 1
                elif ele in pun:
                    spe += 1

            char = upp + alpha

            if (char >= 4 and upp >= 1) and (num >= 2 and spe >= 1):
                print("\nPassword Created Succesfully!")
                return p
            else:
                print("\nIncorrect❗")
                print("❌", end="") if char < 4 else print("✅", end="")
                print("  4 Characters")
                print("❌", end="") if upp < 1 else print("✅", end="")
                print("  1 Upper Cased")
                print("❌", end="") if num < 2 else print("✅", end="")
                print("  2 Numerics")
                print("❌", end="") if spe < 1 else print("✅", end="")
                print("  1 Special Character")
                print("\nPlease Set Again")
                continue

        else:
            print(
                "\nInvalid Input❗ --> Length must be between 8 to 14 Characters (Whitespace is Not Allowed)"
            )
            continue


def validate_pin() -> (
    str
):  # Check for correct length(4-6 digits) and format of the pin generated by user.
    return get_valid_input(
        "Set Transaction PIN (length: 4 - 6): ", r"^[0-9]{4,6}$", "Invalid PIN❗"
    )


def generate_accnum() -> str:  # Generates unique random acc_num for the new costomer.
    acc_number = "GLOBFI" + "".join(random.choices(string.digits, k=6))

    while True:
        try:
            with open("input_data1.csv") as file:
                reader = csv.DictReader(file)
                data = list(reader)

                if any(dictionary["acc_num"] == acc_number for dictionary in data):
                    acc_number = "GLOBFI" + "".join(random.choices(string.digits, k=6))
                else:
                    return acc_number

        except FileNotFoundError:
            raise Exception("File not found")
